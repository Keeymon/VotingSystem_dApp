{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","App","state","accounts","contract","votingState","votingStateVerbose","owner","addressRegister","proposalRegister","listProposals","idVote","winningDescription","componentDidMount","eth","getAccounts","net","getId","networkId","deployedNetwork","VotingContract","networks","instance","Contract","abi","address","utils","methods","call","toChecksumAddress","setState","runInit","alert","error","on","handleAccounts","getStatus","vState","getAllDescription","getWinner","events","WorkflowStatusChange","event","handleVotingState","VotingSessionStarted","handleVotingStart","VotesTallied","handleVoteTallied","VoterRegistered","handleVoterRegistered","length","returnValues","list","description","handleChangeVoterRegister","target","value","handleSubmitVoterRegister","preventDefault","voterRegister","adressInput","send","from","proposalsRegistrationStart","handleChangeProposalsRegister","handleSubmitProposalsRegister","proposal","proposalsRegistrationEnd","votingSessionStart","handleChangeVote","handleSubmitVote","vote","votingSessionEnd","defineWinner","this","display","className","getStateVerbose","onSubmit","name","type","onChange","onClick","map","i","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2703174a.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\n\nimport VotingContract from \"./contracts/Voting.json\";\n//import \"react-notifications/lib/notifications.css\";\n//import {NotificationContainer, NotificationManager} from 'react-notifications';\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\nimport { divCeil } from \"@ethereumjs/vm/dist/evm/opcodes\";\n\nclass App extends Component {\n  state = { web3: null, accounts: null, contract: null,\n    votingState: null, votingStateVerbose: null,\n    owner: null, addressRegister: null, proposalRegister: null, listProposals: null, idVote: \"\",\n    winningDescription: \"\" };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = VotingContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        VotingContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      const owner = web3.utils.toChecksumAddress(await instance.methods.owner().call());\n\n      const votingStateVerbose = [\n        \"Enregistrement des participants\",\n        \"Faites vos propositions\",\n        \"Fin des propositions, en attente du début du vote\",\n        \"Vote en cours\",\n        \"Fin du vote, en attente des résultats\",\n        \"Résultats\"\n      ];\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance, votingStateVerbose, owner }, this.runInit);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  runInit = async () => {\n    const { contract } = this.state;\n    const { ethereum } = window;\n\n    ethereum.on(\"accountsChanged\", this.handleAccounts);\n\n    const vState = await contract.methods.getStatus().call();\n    this.setState({ votingState: vState });\n    if(vState >= 3 )\n      this.setState({ listProposals: await contract.methods.getAllDescription().call() });\n    if(vState >= 5 )\n      this.setState({ winningDescription: await contract.methods.getWinner().call() });\n    contract.events.WorkflowStatusChange().on('data', (event) => this.handleVotingState(event)).on('error', console.error);\n    contract.events.VotingSessionStarted().on('data', (event) => this.handleVotingStart(event)).on('error', console.error);\n    contract.events.VotesTallied().on('data', (event) => this.handleVoteTallied(event)).on('error', console.error);\n    contract.events.VoterRegistered().on('data', (event) => this.handleVoterRegistered(event)).on('error', console.error);\n  };\n\n  handleAccounts = (accounts) => {\n    const { web3 } = this.state;\n    if (web3 != null && accounts.length > 0)\n      this.setState({ accounts });\n    console.log(accounts[0]);\n  }\n\n  /*\n  * @dev: à compléter\n  */\n  handleVoterRegistered = async (event) => {\n    console.log(\"OK\");\n  }\n\n  handleVotingState = async (event) => {\n    this.setState({ votingState: event.returnValues[1] });\n  }\n\n  handleVotingStart = async (event) => {\n    const { contract } = this.state;\n    const list = await contract.methods.getAllDescription().call();\n    this.setState({ listProposals: list });\n  }\n\n  handleVoteTallied = async (event) => {\n    const { contract } = this.state;\n    const description = await contract.methods.getWinner().call();\n    this.setState({winningDescription: description});\n  }\n\n  getStateVerbose(vState) {\n    const { votingStateVerbose } = this.state;\n    return votingStateVerbose[vState];\n  }\n\n  /* Voter Register */\n  handleChangeVoterRegister = (event) => {\n    this.setState({addressRegister: event.target.value});\n  }\n\n  handleSubmitVoterRegister = async (event) => {\n    const { accounts, contract } = this.state;\n    event.preventDefault();\n    await contract.methods.voterRegister(event.target.adressInput.value).send({ from: accounts[0] });\n  }\n\n  proposalsRegistrationStart = async () => {\n    const { accounts, contract } = this.state;\n    await contract.methods.proposalsRegistrationStart().send({ from: accounts[0] });\n  }\n\n  /* Proposal Register */\n  handleChangeProposalsRegister = (event) => {\n    this.setState({ proposalRegister: event.target.value });\n  }\n\n  handleSubmitProposalsRegister = async (event) => {\n    const { accounts, contract} = this.state;\n    event.preventDefault();\n    await contract.methods.proposalRegister(event.target.proposal.value).send({ from: accounts[0] });\n  }\n\n  proposalsRegistrationEnd = async () => {\n    const { accounts, contract } = this.state;\n    await contract.methods.proposalsRegistrationEnd().send({ from: accounts[0] });\n  }\n\n  /* Voting Session Start */\n  votingSessionStart = async () => {\n    const { accounts, contract } = this.state;\n    await contract.methods.votingSessionStart().send({ from: accounts[0] });\n  }\n\n  /* Voting Session */\n  handleChangeVote = (event) => {\n    this.setState({ idVote: event.target.value })\n  }\n\n  handleSubmitVote = async (event) => {\n    const { accounts, contract } = this.state;\n    event.preventDefault();\n    await contract.methods.vote(event.target.vote.value).send({ from: accounts[0] });\n  }\n\n  votingSessionEnd = async () => {\n    const { accounts, contract } = this.state;\n    await contract.methods.votingSessionEnd().send({ from: accounts[0] });\n  }\n\n  /* Result */\n  defineWinner = async () => {\n    const { accounts, contract } = this.state;\n    await contract.methods.defineWinner().send({ from: accounts[0] });\n  }\n\n  render() {\n    const { web3 } = this.state;\n    if (!web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n\n    let display;\n    if (web3.utils.toChecksumAddress(this.state.owner) === web3.utils.toChecksumAddress(this.state.accounts[0]))\n      display = <div>Je suis admin</div>;\n    else\n      display = <div>Je suis pas admin</div>;\n      \n    return (\n      <div className=\"App\">\n        <div>\n            <h2 className=\"text-center\">Système de Vote</h2>\n            <hr></hr>\n        </div>\n        <div>\n            <h3 className=\"text-center\"> Status : {this.getStateVerbose(this.state.votingState)} </h3>\n        </div>\n\n      {display}\n\n        {/* Enregistrement des participants */}\n        <div className={this.state.votingState == 0 ? \"contenu contenu-active\" : \"contenu\"}>\n          <form onSubmit={this.handleSubmitVoterRegister}>\n            <label>\n              Adresse :\n              <input name=\"adressInput\" type=\"text\" value={this.state.value} onChange={this.handleChangeVoterRegister} />\n            </label>\n          <input type=\"submit\" value=\"Envoyer\" />\n          </form>\n          <div className={web3.utils.toChecksumAddress(this.state.owner) == web3.utils.toChecksumAddress(this.state.accounts[0]) ? \"contenu contenu-active\" : \"contenu\"}>\n            <button onClick={this.proposalsRegistrationStart}>Lancer le début des propositions</button>\n          </div>\n        </div>\n\n        {/* Faites vos propositions */}\n        <div className={this.state.votingState == 1 ? \"contenu contenu-active\" : \"contenu\"}>\n          <form onSubmit={this.handleSubmitProposalsRegister}>\n            <label>\n              Proposition :\n              <input name=\"proposal\" type=\"textarea\" value={this.state.value} onChange={this.handleChangeProposalsRegister} />\n           </label>\n            <input type=\"submit\" value=\"Envoyer\" />\n         </form>\n         <div className={web3.utils.toChecksumAddress(this.state.owner) == web3.utils.toChecksumAddress(this.state.accounts[0]) ? \"contenu contenu-active\" : \"contenu\"}>\n          <button onClick={this.proposalsRegistrationEnd}>Fin des propositions</button>\n         </div>\n        </div>\n\n        {/* Fin des propositions, en attente du début du vote */}\n        <div className={this.state.votingState == 2 ? \"contenu contenu-active\" : \"contenu\"}>\n          <div className={web3.utils.toChecksumAddress(this.state.owner) == web3.utils.toChecksumAddress(this.state.accounts[0]) ? \"contenu contenu-active\" : \"contenu\"}>\n            <button onClick={this.votingSessionStart}>Lancer le vote</button>\n          </div>\n        </div>\n\n        {/* Vote en cours */}\n        <div className={this.state.votingState == 3 ? \"contenu contenu-active\" : \"contenu\"}>\n          <form onSubmit={this.handleSubmitVote}>\n            <label>\n              Choisir une proposition :\n              <select name=\"vote\" value={this.state.idVote} onChange={this.handleChangeVote}>\n                {this.state.listProposals !== null && \n                  this.state.listProposals.map((a, i) => <option value={i}>{a.description}</option>)\n                }\n              </select>\n            </label>\n          <input type=\"submit\" value=\"Envoyer\" />\n          </form>\n          <div className={web3.utils.toChecksumAddress(this.state.owner) == web3.utils.toChecksumAddress(this.state.accounts[0]) ? \"contenu contenu-active\" : \"contenu\"}>\n            <button onClick={this.votingSessionEnd}>Mettre fin au vote</button>\n          </div>\n        </div>\n\n        {/* Fin du vote, en attente des résultats */}\n        <div className={this.state.votingState == 4 ? \"contenu contenu-active\" : \"contenu\"}>\n          <div className={web3.utils.toChecksumAddress(this.state.owner) == web3.utils.toChecksumAddress(this.state.accounts[0]) ? \"contenu contenu-active\" : \"contenu\"}>\n            <button onClick={this.defineWinner}>Comptabiliser les votes</button>\n          </div>\n        </div>\n\n        {/* Résultats */}\n        <div className={this.state.votingState == 5 ? \"contenu contenu-active\" : \"contenu\"}>\n          <div>\n            {this.state.winningDescription}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}